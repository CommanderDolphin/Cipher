/**
 * AlphabeticSubstitution
 */
import java.io.*;
import java.util.*;
import javax.lang.model.util.ElementScanner6;
import javax.swing.JOptionPane;

public class Cipher{
    public static void main(String[] args) throws IOException {
        ArrayList<PolyAlphabetic> polyCiphers = readCurrentCiphers(); 
        String[] options1 ={"Encrypt","Decrypt","Options","Exit"}; //POSSIBLE DOUBLE ENCRYPTION
        String keyword ="",cipher = "",result = "",type = "";
        int choice = 0,ID = 0;

        do{
            choice = (int)(JOptionPane.showOptionDialog(null, "Choose an Option: ", "Cipher",JOptionPane.YES_NO_OPTION, 1,null, options1, options1[0]));
            switch (choice) {
                case 0:

                    String text = JOptionPane.showInputDialog(null,"Enter word(s) to be encrypted: ", "Encryption",1);
                    if(text != null)
                    {
                        keyword = JOptionPane.showInputDialog(null,"Enter key to encrypt with: ", "Encryption",1);
                        if(keyword != null)
                        {
                            text = text.toLowerCase();
                            keyword = keyword.toLowerCase();
                            cipher = "";
                            ID = getLastCipherID(polyCiphers);
                            PolyAlphabetic a = new PolyAlphabetic(ID,keyword, text, cipher);
                            a.encrypt(text, keyword);
                            a.save();
                            polyCiphers.add(a);
                            JOptionPane.showMessageDialog(null, "Plaintext = "+a.getPlainText()+"\nKeyword = "+a.getKey()+"\nCipher = "+a.getCipherText(),"Cipher Encryption",1);
                        }
                    }
                    else
                    {
                    JOptionPane.showMessageDialog(null, "No input detected!","Cipher Encryption",3);
                    }
                    choice = -1;
                    break;

                case 1:
                    cipher = JOptionPane.showInputDialog(null,"Enter a cipher to decrypt: ", "Decryption",1);
                    if(cipher != null)
                    {
                        keyword = JOptionPane.showInputDialog(null,"Enter key to decrypt with: ", "Decryption",1);
                        if(keyword != null)
                        {
                            JOptionPane.showMessageDialog(null, "Decrypting...","Cipher Decryption",3);
                            result = decrypt(cipher, keyword);
                            JOptionPane.showMessageDialog(null, "Cipher = "+cipher+"\nKeyword = "+keyword+"\nPlaintext = "+result,"Cipher Encryption",1);
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "No input detected!","Cipher Encryption",3);
                    }
                    choice = -1;
                    break;

                case 2:
                    String[] choices = {"Monoalphabetic","Polyalphabetic"};
                    type =(String)(JOptionPane.showInputDialog(null, "Choose a cipher:",
                                "Cipher Selection",3, null, choices,choices[0]));
                    JOptionPane.showMessageDialog(null, "You have selected "+type+" cipher types!","Cipher Encryption",3);
                    choice = -1;
                    break;

                case 3:
                    JOptionPane.showMessageDialog(null, "Bye!","Program Terminating",3);
                    System.exit(1);
            }
        }while(choice != 3);
    }

    public static String decrypt(String cipherText,String key){
        final String alphabet = "abcdefghijklmnopqrstuvwxyz";
        char check,letter;
        String cipher = "";
        int keyLength = 0,index = 0;

        cipherText = cipherText.toLowerCase();
        for(int i = 0;i< cipherText.length();i++){
            check = cipherText.charAt(i);
            index = alphabet.indexOf(check);
            if(keyLength >= key.length())
            {
                keyLength = 0;
            }
            index = index-alphabet.indexOf(key.charAt(keyLength))-1;
            if(index < 0)
            {
                index = index + 26;
            }
            keyLength++;
            letter = alphabet.charAt(index);
            cipher += letter;
        }
        return cipher;
    }

    public static ArrayList<PolyAlphabetic> readCurrentCiphers() throws IOException 
    {
        File ciphers = new File("ciphers.txt");
        ArrayList<PolyAlphabetic> cipherList = new ArrayList<PolyAlphabetic>();
        if(ciphers.exists()) {
            Scanner in = new Scanner(ciphers);
            while(in.hasNext()) {
                String[] cipherInfo = in.nextLine().split(",");
                cipherList.add(new PolyAlphabetic(Integer.parseInt(cipherInfo[0]),cipherInfo[1], cipherInfo[2], cipherInfo[3]));
            }
            in.close();
        }
        return cipherList;
    }

    public static int getLastCipherID(ArrayList<PolyAlphabetic> ciphers) 
    {
        int cipherID = 1;
        if(ciphers.size() != 0)
        {
            cipherID = ciphers.get(ciphers.size()-1).getID()+1;
        }
        return cipherID;
    }
}
